# excel_export.py
import sqlite3
import pandas as pd
from datetime import datetime
import os
from config import DB_NAME, logger


def export_database_to_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –≤ Excel —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞."""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–µ—Å–ª–∏ –Ω–µ—Ç)
        temp_dir = "temp_exports"
        if not os.path.exists(temp_dir):
            os.makedirs(temp_dir)

        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = os.path.join(temp_dir, f"bot_database_export_{timestamp}.xlsx")

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        conn = sqlite3.connect(DB_NAME)

        # –°–æ–∑–¥–∞–µ–º Excel writer
        with pd.ExcelWriter(filename, engine='openpyxl') as writer:

            # 1. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_df = pd.read_sql_query("SELECT * FROM users", conn)
            if not users_df.empty:
                users_df.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)

            # 2. –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            transactions_df = pd.read_sql_query("SELECT * FROM transactions", conn)
            if not transactions_df.empty:
                transactions_df.to_excel(writer, sheet_name='–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', index=False)

            # 3. –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
            payments_df = pd.read_sql_query("SELECT * FROM payments", conn)
            if not payments_df.empty:
                payments_df.to_excel(writer, sheet_name='–ü–ª–∞—Ç–µ–∂–∏', index=False)

            # 4. –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Å—Å–∏–π
            sessions_df = pd.read_sql_query("SELECT * FROM sessions", conn)
            if not sessions_df.empty:
                sessions_df.to_excel(writer, sheet_name='–°–µ—Å—Å–∏–∏', index=False)

            # 5. –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_df = pd.read_sql_query("SELECT * FROM settings", conn)
            if not settings_df.empty:
                settings_df.to_excel(writer, sheet_name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', index=False)

            # 6. –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_data = generate_statistics(conn)
            stats_df = pd.DataFrame([stats_data])
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)

        conn.close()

        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
        return filename

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        try:
            if 'filename' in locals() and os.path.exists(filename):
                os.remove(filename)
        except:
            pass

        return None


def generate_statistics(conn):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    stats = {}

    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_stats = pd.read_sql_query("""
            SELECT 
                COUNT(*) as total_users,
                COUNT(DISTINCT referrer_id) as users_with_referrals,
                SUM(balance) as total_balance,
                AVG(balance) as avg_balance
            FROM users
        """, conn)

        if not users_stats.empty:
            stats['–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'] = users_stats.iloc[0]['total_users']
            stats['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏'] = users_stats.iloc[0]['users_with_referrals']
            stats['–û–±—â–∏–π –±–∞–ª–∞–Ω—Å'] = round(users_stats.iloc[0]['total_balance'] or 0, 2)
            stats['–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å'] = round(users_stats.iloc[0]['avg_balance'] or 0, 2)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        transactions_stats = pd.read_sql_query("""
            SELECT 
                type,
                COUNT(*) as count,
                SUM(amount) as total_amount
            FROM transactions 
            WHERE status = 'completed'
            GROUP BY type
        """, conn)

        for _, row in transactions_stats.iterrows():
            stats[f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π {row["type"]}'] = row['count']
            stats[f'–°—É–º–º–∞ {row["type"]}'] = round(row['total_amount'] or 0, 2)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        payments_stats = pd.read_sql_query("""
            SELECT 
                status,
                COUNT(*) as count,
                SUM(amount) as total_amount
            FROM payments 
            GROUP BY status
        """, conn)

        for _, row in payments_stats.iterrows():
            stats[f'–ü–ª–∞—Ç–µ–∂–µ–π {row["status"]}'] = row['count']
            stats[f'–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π {row["status"]}'] = round(row['total_amount'] or 0, 2)

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
        top_users = pd.read_sql_query("""
            SELECT username, balance 
            FROM users 
            WHERE balance > 0 
            ORDER BY balance DESC 
            LIMIT 5
        """, conn)

        for i, (_, row) in enumerate(top_users.iterrows(), 1):
            stats[f'–¢–æ–ø {i} ({row["username"]})'] = round(row['balance'], 2)

        # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        stats['–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        stats['–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'] = str(e)

    return stats



def cleanup_old_exports(max_files=5):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_files."""
    try:
        temp_dir = "temp_exports"
        if not os.path.exists(temp_dir):
            return

        # –ò—â–µ–º —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_files = [f for f in os.listdir(temp_dir) if f.startswith('bot_database_export_') and f.endswith('.xlsx')]

        if len(export_files) > max_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            export_files.sort(key=lambda x: os.path.getctime(os.path.join(temp_dir, x)))

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ max_files)
            for old_file in export_files[:-max_files]:
                file_path = os.path.join(temp_dir, old_file)
                os.remove(file_path)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞: {old_file}")

        # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –ø—É—Å—Ç–∞—è - —É–¥–∞–ª—è–µ–º –µ—ë
        if not os.listdir(temp_dir):
            os.rmdir(temp_dir)
            logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


def cleanup_all_temp_exports():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    try:
        temp_dir = "temp_exports"
        if os.path.exists(temp_dir):
            for file in os.listdir(temp_dir):
                file_path = os.path.join(temp_dir, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file}")

            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –ø–∞–ø–∫—É
            os.rmdir(temp_dir)
            logger.info("‚úÖ –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")