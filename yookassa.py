import base64
import uuid
import requests
from config import YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY, YOOKASSA_API_URL, logger
from db import add_payment


def create_yookassa_payment(amount, user_id, bot_username):
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("‚ùå –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ÆKassa –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return None

    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}".encode('utf-8')
    encoded_auth = base64.b64encode(auth_string).decode('utf-8')

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {encoded_auth}",
        "Idempotence-Key": str(uuid.uuid4())
    }

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω—É–ª–µ–π)
    formatted_amount = f"{amount:.2f}"
    if formatted_amount.endswith('.00'):
        formatted_amount = formatted_amount[:-3]
    user_email = "user@example.com"
    payload = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "capture": True,
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{bot_username}"
        },
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (user_id: {user_id})",
        "metadata": {
            "user_id": user_id
        },
        # –î–û–ë–ê–í–õ–Ø–ï–ú –î–ê–ù–ù–´–ï –î–õ–Ø –ß–ï–ö–ê 54-–§–ó
        "receipt": {
    "customer": {
        "email": user_email
    },
    "items": [
        {
            "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            "quantity": "1",
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "vat_code": "6",  # –ë–µ–∑ –ù–î–°
            "payment_mode": "full_payment",
            "payment_subject": "service"
        }
    ]
}
    }

    try:
        logger.info(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {amount} —Ä—É–± –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        response = requests.post(YOOKASSA_API_URL, json=payload, headers=headers, timeout=30)

        if response.status_code != 200:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ÆKassa API: {response.status_code} - {response.text}")
            return None

        payment_data = response.json()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
        add_payment(user_id, amount, payment_data['id'], 'pending')

        logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_data['id']}")
        return payment_data['confirmation']['confirmation_url']

    except requests.exceptions.Timeout:
        logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa")
        return None
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {str(e)}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {str(e)}")
        return None


def check_payment_status(payment_id):
    if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
        logger.error("‚ùå –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ÆKassa –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return None

    url = f"{YOOKASSA_API_URL}/{payment_id}"

    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}".encode('utf-8')
    encoded_auth = base64.b64encode(auth_string).decode('utf-8')

    headers = {
        "Authorization": f"Basic {encoded_auth}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.get(url, headers=headers, timeout=30)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return None