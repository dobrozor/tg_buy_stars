import base64
import os
import json
import logging
import sqlite3
import uuid
import threading
import time
import asyncio
import requests
from datetime import datetime
from dotenv import load_dotenv
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message


try:
    from config import STAR_PRICE, MAIN_MENU_IMAGE, WELCOME_MES, logger, REFERRAL_REWARD # –î–û–ë–ê–í–õ–ï–ù REFERRAL_REWARD
    from db import (
        init_db, get_user, create_user, update_balance, add_transaction,
        get_pending_payment, update_payment_status,
        set_session_data, get_session_data, delete_session_data,
        get_setting, set_setting, get_referral_count # –î–û–ë–ê–í–õ–ï–ù get_referral_count
    )
    from fragment_api import load_fragment_token, authenticate_fragment, send_stars
    from yookassa import create_yookassa_payment, check_payment_status
    from keyboards import (
        main_menu_keyboard, buy_stars_options_keyboard, buy_stars_quantity_keyboard,
        back_to_main_keyboard
    )
except ImportError as e:

    class MockLogger:
        def info(self, msg): print(f"INFO: {msg}")

        def error(self, msg): print(f"ERROR: {msg}")

        def warning(self, msg): print(f"WARNING: {msg}")


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')

TON_DEPOSIT_ADDRESS = os.getenv('TON_DEPOSIT_ADDRESS')  # –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞
TON_API_KEY = os.getenv('TON_API_KEY')  # –ö–ª—é—á –æ—Ç toncenter.com
TON_API_BASE_URL = 'https://toncenter.com'

TON_RATE_API = "https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

animation_running = False


# --- –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ ---
def animate_caption(bot, call):
    global animation_running
    dots = 1
    while animation_running:
        caption = "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–≤–µ–∑–¥—ã" + "." * dots
        try:
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=caption,
                reply_markup=None
            )
        except Exception as e:
            if "message is not modified" not in str(e):
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
            break

        dots = (dots % 3) + 1
        time.sleep(1)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start', 'menu'])
def start_or_menu(message: Message):
    user = message.from_user
    username = user.username if user.username else None

    # --- –õ–û–ì–ò–ö–ê –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò ---
    referrer_id = None
    if message.text and len(message.text.split()) > 1:
        payload = message.text.split()[1]
        # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: /start r<referrer_id>
        if payload.startswith('r') and payload[1:].isdigit():
            possible_referrer_id = int(payload[1:])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä –Ω–µ —Å–∞–º —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—Å–∏–ª
            if possible_referrer_id != user.id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if get_user(possible_referrer_id):
                    referrer_id = possible_referrer_id
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä: {referrer_id} –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.id}")

    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è
    user_created = create_user(user.id, username, referrer_id)  # –ü–ï–†–ï–î–ê–ï–ú referrer_id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–û–í–´–ô –ò –±—ã–ª —Ä–µ—Ñ–µ—Ä–µ—Ä, –Ω–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
    if user_created and referrer_id is not None:
        update_balance(referrer_id, REFERRAL_REWARD)
        add_transaction(
            user_id=referrer_id,
            amount=REFERRAL_REWARD,
            transaction_type='referral_reward',
            status='completed',
            target_user=str(user.id)
        )
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        try:
            bot.send_message(
                referrer_id,
                f"‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞!\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username or user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ. –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ **{REFERRAL_REWARD} —Ä—É–±**!",
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}")

    # --- –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–°–´–õ–ö–ò ---

    bot.send_photo(
        message.chat.id,
        MAIN_MENU_IMAGE,
        caption=WELCOME_MES,
        reply_markup=main_menu_keyboard()
    )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ (–ú–µ–Ω—é –∏ –ü—Ä–æ—Ñ–∏–ª—å) ---
@bot.callback_query_handler(func=lambda call: call.data == 'buy_stars')
def buy_stars_selection_menu(call: CallbackQuery):
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã:",
        reply_markup=buy_stars_options_keyboard()
    )


# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–†–´ –î–õ–Ø –î–ï–ü–û–ó–ò–¢–ê ---
def deposit_keyboard(user_data):
    keyboard = InlineKeyboardMarkup()
    amounts = [50, 100, 500, 1000]
    for amount in amounts:
        keyboard.row(InlineKeyboardButton(f"{amount} —Ä—É–± (–ÆKassa)", callback_data=f'deposit_{amount}'))

    # –î–æ–±–∞–≤–ª—è–µ–º TON –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    keyboard.row(InlineKeyboardButton("ü™ô –ü–æ–ø–æ–ª–Ω–∏—Ç—å TON", callback_data='deposit_ton'))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã (–ÆKassa)
    keyboard.row(InlineKeyboardButton("‚úçÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞ (–ÆKassa)", callback_data='deposit_custom'))
    keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))
    return keyboard


@bot.callback_query_handler(func=lambda call: call.data == 'deposit')
def deposit_menu(call: CallbackQuery):
    user_id = call.from_user.id
    user_data = get_user(user_id)
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å—É–º–º—É:\n\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} —Ä—É–±",
        reply_markup=deposit_keyboard(user_data)
    )


@bot.callback_query_handler(func=lambda call: call.data == 'profile')
def show_profile(call: CallbackQuery):
    user_id = call.from_user.id
    user_data = get_user(user_id)
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üÜî ID: {user_data['user_id']}\n"
                f"üë§ Username: @{user_data['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} —Ä—É–±\n",
        reply_markup=back_to_main_keyboard()
    )


@bot.callback_query_handler(func=lambda call: call.data == 'referrals_menu')
def show_referrals_menu(call: CallbackQuery):
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
    bot_username = bot.get_me().username
    referral_link = f"https://t.me/{bot_username}?start=r{user_id}"

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referral_count = get_referral_count(user_id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    referral_keyboard = InlineKeyboardMarkup()
    referral_keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))

    caption = (
        f"üîó **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!\n"
        f"üéÅ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –±–æ—Ç–∞, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ **{REFERRAL_REWARD} —Ä—É–±** –Ω–∞ –±–∞–ª–∞–Ω—Å.\n\n"
        f"üë§ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: **{referral_count}**\n\n"
        f"**–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**\n"
        f"`{referral_link}`"
    )

    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=caption,
        reply_markup=referral_keyboard,
        parse_mode='Markdown'
    )

@bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
def main_menu_callback(call: CallbackQuery):
    delete_session_data(call.from_user.id)  # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=WELCOME_MES,
        reply_markup=main_menu_keyboard()
    )


# --- –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π) ---
@bot.callback_query_handler(func=lambda call: call.data == 'buy_stars_self')
def buy_stars_self(call: CallbackQuery):
    user_id = call.from_user.id
    user_data = get_user(user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π username –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
    session_data = {
        'target_username': user_data['username'],
        'state': 'buying_stars',
        'message_id': call.message.message_id
    }
    set_session_data(user_id, session_data)

    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:.2f} —Ä—É–±",
        reply_markup=buy_stars_quantity_keyboard(user_data)
    )


@bot.callback_query_handler(func=lambda call: call.data == 'buy_stars_friend')
def buy_stars_friend(call: CallbackQuery):
    user_id = call.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è username –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
    session_data = {
        'state': 'waiting_for_username',
        'message_id': call.message.message_id,
        'target_username': None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    }
    set_session_data(user_id, session_data)

    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username –¥—Ä—É–≥–∞ (–±–µ–∑ @):",
        reply_markup=back_to_main_keyboard()
    )
    bot.register_next_step_handler(call.message, process_friend_username)


def process_friend_username(message: Message):
    user_id = message.from_user.id
    username_input = message.text.strip().lstrip('@')

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
    state_data = get_session_data(user_id)
    target_message_id = state_data.get('message_id')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state_data.get('state') != 'waiting_for_username' or not target_message_id:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è username

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        if message.message_id != target_message_id:
            bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    if not username_input:
        bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=target_message_id,
            caption="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=back_to_main_keyboard()
        )
        bot.register_next_step_handler(message, process_friend_username)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    session_data = {
        'target_username': username_input,
        'state': 'buying_stars',
        'message_id': target_message_id
    }
    set_session_data(user_id, session_data)

    user_data = get_user(user_id)

    bot.edit_message_caption(
        chat_id=message.chat.id,
        message_id=target_message_id,
        caption=f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **@{username_input}**. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        reply_markup=buy_stars_quantity_keyboard(user_data),
        parse_mode='Markdown'
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
def handle_star_purchase(call: CallbackQuery):
    stars = int(call.data.split('_')[1])
    user_id = call.from_user.id
    user_data = get_user(user_id)
    cost = stars * STAR_PRICE

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π username –∏–∑ –ë–î
    session_data = get_session_data(user_id)
    target_username = session_data.get('target_username')

    if not target_username:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                                  show_alert=True)
        main_menu_callback(call)
        return

    if user_data['balance'] < cost:
        bot.answer_callback_query(call.id, f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ù—É–∂–Ω–æ {cost:.2f} —Ä—É–±.", show_alert=True)
        return

    # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    global animation_running
    animation_running = True
    animation_thread = threading.Thread(target=animate_caption, args=(bot, call))
    animation_thread.start()

    try:
        token = load_fragment_token() or authenticate_fragment()
        if not token:
            animation_running = False
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Fragment API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_main_keyboard()
            )
            return

        success, message = send_stars(token, target_username, stars)

        animation_running = False
        animation_thread.join()

        if success:
            update_balance(user_data['user_id'], -cost)
            add_transaction(user_data['user_id'], stars, 'stars_purchase', target_user=target_username)
            user_data_new = get_user(user_id)

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **@{target_username}**!\n"
                        f"üí∞ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data_new['balance']:.2f} —Ä—É–±",
                reply_markup=back_to_main_keyboard(),
                parse_mode='Markdown'
            )
        else:
            if "not enough funds" in message.lower() or "–±–∞–ª–∞–Ω—Å" in message.lower():
                error_message = "‚ùå –£ –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–≤–µ–∑–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {message}"

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=error_message,
                reply_markup=back_to_main_keyboard()
            )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        delete_session_data(user_id)

@bot.callback_query_handler(func=lambda call: call.data == 'deposit_ton')
def handle_ton_deposit(call: CallbackQuery):
    user_id = call.from_user.id

    if not TON_DEPOSIT_ADDRESS:
        bot.answer_callback_query(call.id, "‚ùå –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ TON –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–∞–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω).", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    ton_rub_rate = get_ton_rub_rate()
    rate_text = f"~{ton_rub_rate:.2f} —Ä—É–±" if ton_rub_rate else "–∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

    # URL –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–ø–ª–∞—Ç—ã
    payment_url = f'ton://transfer/{TON_DEPOSIT_ADDRESS}?text={user_id}'

    caption = (
        f"ü™ô –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON:\n\n"
        f"1. –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Å—É–º–º—É TON –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å:\n"
        f"   `{TON_DEPOSIT_ADDRESS}`\n\n"
        f"2. **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ** —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å–≤–æ–π ID:\n"
        f"   `{user_id}`\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 TON ‚âà {rate_text}\n"
        f"‚ö†Ô∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ **–†–£–ë–õ–Ø–•** –ø–æ—Å–ª–µ 3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —Å–µ—Ç–∏."
    )

    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("‚ÜóÔ∏è –û–ø–ª–∞—Ç–∏—Ç—å –≤ TON", url=payment_url))
    keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='deposit'))

    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=caption,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )


# --- –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ÆKassa (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π) ---
@bot.callback_query_handler(
    func=lambda call: call.data.startswith('deposit_') and call.data != 'deposit_custom' and call.data != 'deposit_ton')
def handle_predefined_deposit(call: CallbackQuery):
    amount = int(call.data.split('_')[1])
    process_deposit(call, amount)


@bot.callback_query_handler(func=lambda call: call.data == 'deposit_custom')
def handle_custom_deposit(call: CallbackQuery):
    user_id = call.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—É–º–º—ã –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
    session_data = {
        'state': 'waiting_for_deposit_amount',
        'message_id': call.message.message_id
    }
    set_session_data(user_id, session_data)

    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="üí∞ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?",
        reply_markup=back_to_main_keyboard()
    )
    bot.register_next_step_handler(call.message, process_custom_deposit_amount)


def process_custom_deposit_amount(message: Message):
    user_id = message.from_user.id
    amount_input = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –ë–î
    state_data = get_session_data(user_id)
    target_message_id = state_data.get('message_id')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if state_data.get('state') != 'waiting_for_deposit_amount' or not target_message_id:
        return

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        if message.message_id != target_message_id and target_message_id:
            bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    try:
        amount = round(float(amount_input), 2)
        if amount <= 0:
            raise ValueError
    except ValueError:
        if target_message_id:
            bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=target_message_id,
                caption="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:",
                reply_markup=back_to_main_keyboard()
            )
            bot.register_next_step_handler(message, process_custom_deposit_amount)
            return
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ì–ê: –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞-–∑–∞–≥–ª—É—à–∫–∏ (MockCall) –≤–º–µ—Å—Ç–æ CallbackQuery ---
    call_mock = type('MockCall', (object,), {
        'id': 'mock_id',
        'from_user': message.from_user,
        'message': type('MockMessage', (object,), {
            'chat': type('MockChat', (object,), {'id': message.chat.id})(),
            'message_id': target_message_id
        })()
    })()

    # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    process_deposit(call_mock, amount)

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    delete_session_data(user_id)


def process_deposit(call, amount: float):
    # 'call' –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ CallbackQuery, —Ç–∞–∫ –∏ MockCall
    bot_username = bot.get_me().username
    payment_url = create_yookassa_payment(amount, call.from_user.id, bot_username)

    if payment_url:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='check_payment'))

        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ **{amount:.2f} —Ä—É–±**:\n\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}\n"
                    f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç\n"
                    f"3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
                    "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    else:
        # bot.answer_callback_query —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å CallbackQuery, —Ç–∞–∫ –∏ —Å MockCall (–µ—Å–ª–∏ –∞—Ç—Ä–∏–±—É—Ç 'id' –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω)
        try:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except Exception:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ MockCall, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–µ–ø–æ–∑–∏—Ç–∞
        deposit_menu(call)


@bot.callback_query_handler(func=lambda call: call.data == 'check_payment')
def handle_check_payment(call: CallbackQuery):
    user_id = call.from_user.id

    payment = get_pending_payment(user_id)

    if not payment:
        bot.answer_callback_query(call.id, "‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    payment_id, amount = payment
    payment_info = check_payment_status(payment_id)

    if not payment_info:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    if payment_info['status'] == 'succeeded':
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        update_payment_status(payment_id, 'succeeded')

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        update_balance(user_id, amount)
        add_transaction(user_id, amount, 'deposit', 'completed')

        user_data = get_user(user_id)

        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                    f"üí≥ –°—É–º–º–∞: **{amount:.2f} —Ä—É–±**\n"
                    f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: **{user_data['balance']:.2f} —Ä—É–±**",
            reply_markup=back_to_main_keyboard(),
            parse_mode='Markdown'
        )

    elif payment_info['status'] == 'pending':
        bot.answer_callback_query(
            call.id,
            "‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
            show_alert=True
        )
    else:
        # –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, canceled, expired, etc.)
        update_payment_status(payment_id, payment_info['status'])
        bot.answer_callback_query(
            call.id,
            f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –°—Ç–∞—Ç—É—Å: {payment_info['status']}",
            show_alert=True
        )


# --- –§–£–ù–ö–¶–ò–ò –§–û–ù–û–í–û–ì–û –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê TON (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï) ---

def get_ton_rub_rate():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å TON –∫ —Ä—É–±–ª—é."""
    try:
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API
        time.sleep(0.5)
        response = requests.get(TON_RATE_API, timeout=5)
        response.raise_for_status()
        data = response.json()
        rate = data.get('the-open-network', {}).get('rub')
        if rate:
            return float(rate)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ TON/RUB: {e}")
        return None


async def check_deposits():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞."""
    if not TON_DEPOSIT_ADDRESS or not TON_API_KEY:
        logger.error("TON_DEPOSIT_ADDRESS –∏–ª–∏ TON_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    # --- –ß—Ç–µ–Ω–∏–µ last_lt –∏–∑ –ë–î –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞ ---
    last_lt_str = get_setting('last_lt', '0')
    try:
        last_lt = int(last_lt_str)
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ last_lt –≤ –ë–î: '{last_lt_str}'. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 0.")
        last_lt = 0

    logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ TON. –ü–æ—Å–ª–µ–¥–Ω–∏–π LT: {last_lt}")

    while True:
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        try:
            ton_rub_rate = get_ton_rub_rate()
            if not ton_rub_rate:
                continue

            api_url = (
                f'{TON_API_BASE_URL}/api/v2/getTransactions?'
                f'address={TON_DEPOSIT_ADDRESS}&limit=100&'
                f'archival=true&api_key={TON_API_KEY}'
            )

            resp = requests.get(api_url, timeout=10).json()

            if not resp.get('ok'):
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ TON API: {resp.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                continue

            current_max_lt = last_lt

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
            for tx in reversed(resp.get('result', [])):
                lt = int(tx['transaction_id']['lt'])

                if lt > current_max_lt:
                    current_max_lt = lt

                if lt <= last_lt:
                    continue

                in_msg = tx.get('in_msg')
                if not in_msg:
                    continue

                value_nano = int(in_msg.get('value', 0))

                if value_nano > 0:
                    uid_str = ''
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å user_id –∏–∑ –ø–æ–ª—è 'message' (–æ–±—ã—á–Ω–æ —Ç–∞–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
                    uid_str = in_msg.get('message', '').strip()

                    if not uid_str.isdigit():
                        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {lt}. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π uid –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: '{uid_str}'")
                        continue

                    uid = int(uid_str)
                    ton_amount = value_nano / 1e9

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TON –≤ RUB
                    rub_amount = round(ton_amount * ton_rub_rate, 2)

                    if rub_amount < 1.0:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Å—É–º–º—ã
                        continue

                    user_data = get_user(uid)
                    if not user_data:
                        logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {lt}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        continue

                    # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –†–£–ë–õ–Ø–•
                    update_balance(uid, rub_amount)
                    # target_user –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ TON —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    add_transaction(uid, rub_amount, 'deposit_ton', 'completed', target_user=f'{ton_amount:.4f} TON')

                    logger.info(f"‚úÖ –î–µ–ø–æ–∑–∏—Ç TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! User: {uid}, TON: {ton_amount}, RUB: {rub_amount}")

                    try:
                        bot.send_message(
                            uid,
                            '‚úÖ –î–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!\n'
                            f'–°—É–º–º–∞: *+{ton_amount:.4f} TON* ({rub_amount:.2f} —Ä—É–±)\n'
                            f'–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_user(uid)["balance"]:.2f} —Ä—É–±',
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.error(f"Error sending message to user {uid}: {e}")

            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ LT –≤ –ë–î ---
            if current_max_lt > last_lt:
                last_lt = current_max_lt
                set_setting('last_lt', last_lt)  # <--- –ó–∞–ø–∏—Å—å –≤ –ë–î

        except requests.exceptions.Timeout:
            logger.error("TON API –∑–∞–ø—Ä–æ—Å —Ç–∞–π–º–∞—É—Ç.")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ TON –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")


def run_async_loop():
    """–ó–∞–ø—É—Å–∫ asyncio loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    time.sleep(1)
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(check_deposits())


# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ init_db() –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ db.py
    try:
        init_db()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    # --- –ó–ê–ü–£–°–ö TON –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ---
    deposit_thread = threading.Thread(target=run_async_loop, daemon=True)
    deposit_thread.start()
    logger.info("–ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ TON –¥–µ–ø–æ–∑–∏—Ç–æ–≤.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Fragment API
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Fragment API...")
    try:
        token = load_fragment_token()
        if not token:
            logger.info("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
            token = authenticate_fragment()
            if token:
                logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Fragment API –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Fragment API. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        else:
            logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω Fragment API –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å Fragment API: {e}")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()