import base64
import os
import json
import logging
import sqlite3
import uuid
from datetime import datetime
from dotenv import load_dotenv
import requests
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message

STAR_PRICE = 1.5
MAIN_MENU_IMAGE = "https://sociogramm.ru/assets/uploads/blogs/blog/kak-poluchit-zvezdy-v-telegram-1.jpeg"
WELCOME_MES = f"–ü—Ä–∏–≤–µ—Çüëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Telegram Stars! üåü\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
ADMIN_ID = os.getenv('ADMIN_ID')

# Fragment API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FRAGMENT_API_URL = "https://api.fragment-api.com/v1"
FRAGMENT_API_KEY = os.getenv("FRAGMENT_API_KEY")
FRAGMENT_PHONE = os.getenv("FRAGMENT_PHONE")
FRAGMENT_MNEMONICS = os.getenv("FRAGMENT_MNEMONICS")
TOKEN_FILE = "auth_token.json"
MIN_STARS = 50

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount INTEGER,
        type TEXT,
        status TEXT,
        target_user TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        yookassa_id TEXT,
        status TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    ''')

    conn.commit()
    conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        return {
            'user_id': user[0],
            'username': user[1],
            'balance': user[2],
            'created_at': user[3]
        }
    return None


def create_user(user_id, username):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
        (user_id, username)
    )
    conn.commit()
    conn.close()


def update_balance(user_id, amount):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(
        'UPDATE users SET balance = balance + ? WHERE user_id = ?',
        (amount, user_id)
    )
    conn.commit()
    conn.close()


def add_transaction(user_id, amount, transaction_type, status='completed', target_user=None):
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()
    cursor.execute(
        'INSERT INTO transactions (user_id, amount, type, status, target_user) VALUES (?, ?, ?, ?, ?)',
        (user_id, amount, transaction_type, status, target_user)
    )
    conn.commit()
    conn.close()


# Fragment API —Ñ—É–Ω–∫—Ü–∏–∏
def load_fragment_token():
    if os.path.exists(TOKEN_FILE):
        with open(TOKEN_FILE, "r") as f:
            return json.load(f).get("token")
    return None


def save_fragment_token(token):
    with open(TOKEN_FILE, "w") as f:
        json.dump({"token": token}, f)


def authenticate_fragment():
    try:
        mnemonics_list = FRAGMENT_MNEMONICS.strip().split()
        payload = {
            "api_key": FRAGMENT_API_KEY,
            "phone_number": FRAGMENT_PHONE,
            "mnemonics": mnemonics_list,
            "version": "V4R2"
        }
        res = requests.post(f"{FRAGMENT_API_URL}/auth/authenticate/", json=payload)
        if res.status_code == 200:
            token = res.json().get("token")
            save_fragment_token(token)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Fragment.")
            return token
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {res.text}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {e}")
        return None


def get_fragment_balance(token):
    url = f"{FRAGMENT_API_URL}/misc/wallet/"
    headers = {
        "Accept": "application/json",
        "Authorization": f"JWT {token}"
    }
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get("balance", 0)
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {response.text}")
            return 0
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0


def send_stars(token, username, quantity):
    try:
        data = {
            "username": username,
            "quantity": quantity,
            "show_sender": "false"
        }
        headers = {
            "Authorization": f"JWT {token}",
            "Content-Type": "application/json"
        }

        logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ {quantity} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}...")
        res = requests.post(f"{FRAGMENT_API_URL}/order/stars/", json=data, headers=headers)

        if res.status_code == 200:
            logger.info("‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True, "–£—Å–ø–µ—à–Ω–æ"
        else:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {res.text}"
            logger.error(error_msg)
            return False, res.text

    except Exception as e:
        error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"
        logger.error(error_msg)
        return False, str(e)


# –ÆKassa —Ñ—É–Ω–∫—Ü–∏–∏
def create_yookassa_payment(amount, user_id):
    url = "https://api.yookassa.ru/v3/payments"

    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}".encode('utf-8')
    encoded_auth = base64.b64encode(auth_string).decode('utf-8')

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {encoded_auth}",
        "Idempotence-Key": str(uuid.uuid4())
    }

    payload = {
        "amount": {
            "value": f"{amount:.2f}",
            "currency": "RUB"
        },
        "capture": True,
        "confirmation": {
            "type": "redirect",
            "return_url": f"https://t.me/{bot.get_me().username}"
        },
        "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (user_id: {user_id})",
        "metadata": {
            "user_id": user_id
        }
    }

    try:
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        payment_data = response.json()

        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO payments (user_id, amount, yookassa_id, status) VALUES (?, ?, ?, ?)',
            (user_id, amount, payment_data['id'], 'pending')
        )
        conn.commit()
        conn.close()

        return payment_data['confirmation']['confirmation_url']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {str(e)}")
        return None


def check_payment_status(payment_id):
    url = f"https://api.yookassa.ru/v3/payments/{payment_id}"

    auth_string = f"{YOOKASSA_SHOP_ID}:{YOOKASSA_SECRET_KEY}".encode('utf-8')
    encoded_auth = base64.b64encode(auth_string).decode('utf-8')

    headers = {
        "Authorization": f"Basic {encoded_auth}",
        "Content-Type": "application/json"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        return None


@bot.callback_query_handler(func=lambda call: call.data == 'check_payment')
def handle_check_payment(call: CallbackQuery):
    user_id = call.from_user.id
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    try:
        cursor.execute(
            'SELECT yookassa_id, amount FROM payments '
            'WHERE user_id = ? AND status = "pending" '
            'ORDER BY created_at DESC LIMIT 1',
            (user_id,)
        )
        payment = cursor.fetchone()

        if not payment:
            bot.answer_callback_query(call.id, "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        payment_id, amount = payment
        payment_info = check_payment_status(payment_id)

        if not payment_info:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            return

        if payment_info['status'] == 'succeeded':
            cursor.execute(
                'UPDATE payments SET status = "succeeded" WHERE yookassa_id = ?',
                (payment_id,)
            )

            cursor.execute(
                'UPDATE users SET balance = balance + ? WHERE user_id = ?',
                (amount, user_id)
            )

            cursor.execute(
                'INSERT INTO transactions (user_id, amount, type, status) '
                'VALUES (?, ?, ?, ?)',
                (user_id, amount, 'deposit', 'completed')
            )

            conn.commit()

            user_data = get_user(user_id)

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
                        f"üí≥ –°—É–º–º–∞: {amount} —Ä—É–±\n"
                        f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} —Ä—É–±",
                reply_markup=back_to_main_keyboard()
            )

        elif payment_info['status'] == 'pending':
            bot.answer_callback_query(
                call.id,
                "‚åõ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.",
                show_alert=True
            )
        else:
            bot.answer_callback_query(
                call.id,
                f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –°—Ç–∞—Ç—É—Å: {payment_info['status']}",
                show_alert=True
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
    finally:
        conn.close()


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def main_menu_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", callback_data='buy_stars'),
        InlineKeyboardButton("üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data='deposit')
    )
    keyboard.row(InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'))
    return keyboard


def buy_stars_options_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("–°–µ–±–µ", callback_data='buy_stars_self'),
        InlineKeyboardButton("–î—Ä—É–≥—É", callback_data='buy_stars_friend')
    )
    keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))
    return keyboard


def buy_stars_quantity_keyboard(user_data):
    keyboard = InlineKeyboardMarkup()

    options = [
        (50, f"50 –∑–≤–µ–∑–¥ - {STAR_PRICE * 50:.1f} —Ä—É–±"),
        (100, f"100 –∑–≤–µ–∑–¥ - {STAR_PRICE * 100:.1f} —Ä—É–±"),
        (500, f"500 –∑–≤–µ–∑–¥ - {STAR_PRICE * 500:.1f} —Ä—É–±"),
        (1000, f"1000 –∑–≤–µ–∑–¥ - {STAR_PRICE * 1000:.1f} —Ä—É–±")
    ]

    for stars, text in options:
        keyboard.row(InlineKeyboardButton(text, callback_data=f'buy_{stars}'))

    keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))
    return keyboard


def deposit_keyboard(user_data):
    keyboard = InlineKeyboardMarkup()

    amounts = [50, 100, 500, 1000]
    for amount in amounts:
        keyboard.row(InlineKeyboardButton(f"{amount} —Ä—É–±", callback_data=f'deposit_{amount}'))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Å—É–º–º—ã
    keyboard.row(InlineKeyboardButton("‚úçÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞", callback_data='deposit_custom'))

    keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))
    return keyboard


def back_to_main_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu'))
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    create_user(user.id, user.username)

    bot.send_photo(
        message.chat.id,
        MAIN_MENU_IMAGE,
        caption=WELCOME_MES,
        reply_markup=main_menu_keyboard()
    )


@bot.message_handler(commands=['menu'])
def main_menu(message):
    user = message.from_user
    bot.send_photo(
        message.chat.id,
        MAIN_MENU_IMAGE,
        caption=WELCOME_MES,
        reply_markup=main_menu_keyboard()
    )


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call: CallbackQuery):
    user_id = call.from_user.id
    user_data = get_user(user_id)

    if call.data == 'buy_stars':
        buy_stars_selection_menu(call)
    elif call.data == 'deposit':
        deposit_menu(call, user_data)
    elif call.data == 'profile':
        show_profile(call, user_data)
    elif call.data == 'main_menu':
        main_menu_callback(call)
    elif call.data == 'buy_stars_self':
        user_states[user_id] = {'target_username': user_data['username']}
        buy_stars_menu(call, user_data)
    elif call.data == 'buy_stars_friend':
        user_states[user_id] = {'state': 'waiting_for_username', 'message_id': call.message.message_id}
        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ @username –¥—Ä—É–≥–∞ (–±–µ–∑ @):",
            reply_markup=back_to_main_keyboard()
        )
        msg = call.message
        bot.register_next_step_handler(msg, process_friend_username)
    elif call.data.startswith('buy_'):
        stars = int(call.data.split('_')[1])
        process_star_purchase(call, user_data, stars)
    elif call.data.startswith('deposit_'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Å—É–º–º–∞
        if call.data == 'deposit_custom':
            user_states[user_id] = {'state': 'waiting_for_deposit_amount', 'message_id': call.message.message_id}
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="üí∞ –ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å?",
                reply_markup=back_to_main_keyboard()
            )
            msg = call.message
            bot.register_next_step_handler(msg, process_custom_deposit_amount)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—É–º–º
            amount = int(call.data.split('_')[1])
            process_deposit(call, user_data, amount)
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

def process_custom_deposit_amount(message: Message):
    user_id = message.from_user.id
    amount_input = message.text.strip()
    state_data = user_states.get(user_id, {})
    target_message_id = state_data.get('message_id')

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        if message.message_id != target_message_id:
            bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—É–º–º–∞ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –±–æ–ª—å—à–µ –Ω—É–ª—è
    try:
        amount = float(amount_input)
        if amount <= 0:
            raise ValueError
    except ValueError:
        if target_message_id:
            bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=target_message_id,
                caption="‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:",
                reply_markup=back_to_main_keyboard()
            )
            bot.register_next_step_handler(message, process_custom_deposit_amount)
            return
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return

    # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    payment_url = create_yookassa_payment(amount, user_id)
    if payment_url and target_message_id:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='check_payment'))

        bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=target_message_id,
            caption=f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount} —Ä—É–±:\n\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}\n"
                    f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç\n"
                    f"3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
                    "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
            reply_markup=keyboard
        )
    else:
        if target_message_id:
            bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=target_message_id,
                caption="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_main_keyboard()
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!")

    # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if user_id in user_states:
        del user_states[user_id]

def process_friend_username(message: Message):
    user_id = message.from_user.id
    username_input = message.text.strip().lstrip('@')

    state_data = user_states.get(user_id, {})
    target_message_id = state_data.get('message_id')

    if target_message_id:
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if not username_input:
            bot.edit_message_caption(
                chat_id=message.chat.id,
                message_id=target_message_id,
                caption="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            bot.register_next_step_handler(message, process_friend_username)
            return

        user_states[user_id] = {'target_username': username_input}
        user_data = get_user(user_id)

        bot.edit_message_caption(
            chat_id=message.chat.id,
            message_id=target_message_id,
            caption=f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∑–≤—ë–∑–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **@{username_input}**. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
            reply_markup=buy_stars_quantity_keyboard(user_data),
            parse_mode='Markdown'
        )
    else:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")


def buy_stars_selection_menu(call):
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã:",
        reply_markup=buy_stars_options_keyboard()
    )


def buy_stars_menu(call, user_data):
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']} —Ä—É–±",
        reply_markup=buy_stars_quantity_keyboard(user_data)
    )


def deposit_menu(call, user_data):
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption="üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
                f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_data['balance']} —Ä—É–±",
        reply_markup=deposit_keyboard(user_data)
    )


def show_profile(call, user_data):
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"üÜî ID: {user_data['user_id']}\n"
                f"üë§ Username: @{user_data['username'] or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} —Ä—É–±\n",
        reply_markup=back_to_main_keyboard()
    )


def main_menu_callback(call):
    bot.edit_message_caption(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        caption=WELCOME_MES,
        reply_markup=main_menu_keyboard()
    )


import threading
import time

animation_running = True


def animate_caption(bot, call):
    global animation_running
    dots = 1
    while animation_running:
        caption = "üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–≤–µ–∑–¥—ã" + "." * dots
        try:
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=caption,
                reply_markup=None
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            break

        dots = (dots % 3) + 1
        time.sleep(1)


def process_star_purchase(call, user_data, stars):
    global animation_running
    cost = stars * STAR_PRICE

    target_username = user_states.get(call.from_user.id, {}).get('target_username')

    if user_data['balance'] < cost:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!", show_alert=True)
        return

    animation_running = True
    animation_thread = threading.Thread(target=animate_caption, args=(bot, call))
    animation_thread.start()

    try:
        token = load_fragment_token() or authenticate_fragment()
        if not token:
            animation_running = False
            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption="‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=back_to_main_keyboard()
            )
            return

        success, message = send_stars(token, target_username, stars)

        animation_running = False

        if success:
            update_balance(user_data['user_id'], -cost)
            add_transaction(user_data['user_id'], stars, 'stars_purchase', target_user=target_username)

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {stars} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **@{target_username}**!",
                reply_markup=back_to_main_keyboard(),
                parse_mode='Markdown'
            )
        else:
            if "Not enough funds for wallet " in message.lower() or "–±–∞–ª–∞–Ω—Å" in message.lower() or "not enough funds" in message.lower():
                error_message = "‚ùå –£ –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∑–≤–µ–∑–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            else:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {message}"

            bot.edit_message_caption(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                caption=error_message,
                reply_markup=back_to_main_keyboard()
            )
    finally:
        animation_running = False
        animation_thread.join()


def process_deposit(call, user_data, amount):
    payment_url = create_yookassa_payment(amount, user_data['user_id'])

    if payment_url:
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data='check_payment'))

        bot.edit_message_caption(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            caption=f"üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ {amount} —Ä—É–±:\n\n"
                    f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payment_url}\n"
                    f"2. –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç\n"
                    f"3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'\n\n"
                    "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç.",
            reply_markup=keyboard
        )
    else:
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞!", show_alert=True)


def main():
    init_db()
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Fragment API...")
    token = load_fragment_token()
    if not token:
        logger.info("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        token = authenticate_fragment()
        if token:
            logger.info("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Fragment API –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Fragment API. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
    else:
        logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω Fragment API –Ω–∞–π–¥–µ–Ω.")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()


if __name__ == "__main__":
    main()
