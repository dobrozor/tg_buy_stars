import json
import os
import telebot
import config
import requests

from bot import bot
from config import (
    FRAGMENT_API_URL, FRAGMENT_API_KEY, FRAGMENT_PHONE,
    FRAGMENT_MNEMONICS, TOKEN_FILE, logger
)


def load_fragment_token():
    if os.path.exists(TOKEN_FILE):
        try:
            with open(TOKEN_FILE, "r") as f:
                return json.load(f).get("token")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            return None
    return None


def save_fragment_token(token):
    try:
        with open(TOKEN_FILE, "w") as f:
            json.dump({"token": token}, f)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {e}")


def authenticate_fragment():
    if not FRAGMENT_MNEMONICS:
        logger.error("‚ùå FRAGMENT_MNEMONICS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return None

    try:
        mnemonics_list = FRAGMENT_MNEMONICS.strip().split()
        payload = {
            "api_key": FRAGMENT_API_KEY,
            "phone_number": FRAGMENT_PHONE,
            "mnemonics": mnemonics_list,
            "version": "V4R2"
        }
        res = requests.post(f"{FRAGMENT_API_URL}/auth/authenticate/", json=payload)
        if res.status_code == 200:
            token = res.json().get("token")
            save_fragment_token(token)
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Fragment.")
            return token
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {res.text}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Fragment: {e}")
        return None


def send_stars(token, username, quantity):
    try:
        data = {
            "username": username,
            "quantity": quantity,
            "show_sender": "false"
        }
        headers = {
            "Authorization": f"JWT {token}",
            "Content-Type": "application/json"
        }

        logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ {quantity} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}...")
        res = requests.post(f"{FRAGMENT_API_URL}/order/stars/", json=data, headers=headers)

        if res.status_code == 200:
            bot.send_message(config.ADMIN_ID, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {quantity} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}...")
            logger.info("‚úÖ –ó–≤–µ–∑–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True, "–£—Å–ø–µ—à–Ω–æ"
        else:
            bot.send_message(config.ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {quantity} ‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}. \n\n–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {res.text}")
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {res.text}"
            logger.error(error_msg)
            return False, res.text

    except Exception as e:
        error_msg = f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}"
        logger.error(error_msg)
        return False, str(e)